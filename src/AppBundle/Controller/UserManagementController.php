<?php/** * Created by PhpStorm. * User: boran * Date: 02/11/2017 * Time: 16:33 */namespace AppBundle\Controller;use AppBundle\Datatables\UserDatatable;use AppBundle\Entity\User;use AppBundle\Form\addUserForm;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\Request;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\HttpFoundation\JsonResponse;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;/** * @Security("is_granted('ROLE_ADMIN')") */class UserManagementController extends Controller{    /**     * @Route("/usermanage", name="user_show")     */    public function UserManagAction(Request $request)    {        $addUserForm = $this->get('form.factory')->createNamed(null, addUserForm::class);        $datatable = $this->get('sg_datatables.factory')->create(UserDatatable::class);        $datatable->buildDatatable();        $isAjax = $request->isXmlHttpRequest();        if ($isAjax) {            $responseService = $this->get('sg_datatables.response');            $responseService->setDatatable($datatable);            $datatableQueryBuilder = $responseService->getDatatableQueryBuilder();            $datatableQueryBuilder->buildQuery();            /*                        $qb=$datatableQueryBuilder->getQb();                        $qb->andWhere('StandOrt.id = :id');                        $qb->setParameter('id', $ortId);            */            $qb = $datatableQueryBuilder->getQb();            return $responseService->getResponse(true, true);        }        return $this->render(':mainpages:UserManagement.html.twig', ['datatable' => $datatable, 'userForm' => $addUserForm->createView()]);    }    /**     * @Route("userdelete/{id}", name="user_delete")     * @Method("GET")     * @return \Symfony\Component\HttpFoundation\RedirectResponse     */    public function deleteAction(Request $request, User $user)    {        $loginuser=$this->getUser();        if($user->getId()==$loginuser->getId())        {            return new JsonResponse(array('failed' => 'Sie Können Sich nicht Löschen'));        }        $em = $this->getDoctrine()->getManager();        $em->remove($user);        $em->flush();        return $this->redirectToRoute('user_show');    }    /**     * @Route("/saveuser",name="save_user")     */    public function addUserAction(Request $request){        if ($request->isXMLHttpRequest()) {            $data=$request->getContent();            $em=$this->getDoctrine()->getManager();            $username= $_POST['_username'];            $password = $_POST['_password'];            $StandOrtid = $_POST['StandOrt'];            $em=$this->getDoctrine()->getManager();            $StandOrt=$em->getRepository("AppBundle:StandOrt")->find($StandOrtid);            $user=new User();            $user->setEmail($username);            $user->setPlainPassword($password);            $user->setStandOrt($StandOrt);            $user->setPasswordKey();            $user->setAktiv(true);            if(isset($_POST['roles'])){                $user->setRoles(['ROLE_USER','ROLE_ADMIN']);            }            else{                $user->setRoles(['ROLE_USER']);            }            $em->persist($user);            $em->flush();            return new JsonResponse(array('status' => '1', 'message' => 'Done '));        }        return new JsonResponse(array('failed' => 'Something is going wrong'));    }}